--[[ 
> Dynamic News by ARS Team, xStream, Red75, Dexxx, Skunk, Xmk
> Re-vamped by Alundaio for Call of Chernobyl
> Re-vamped by First_Lieutenant_Skelja, senyaGTA, Letozz, Skeli, VanoSanturi, SashaRad, RadioactiveToilet for MLR 8.3
> Re-vamped by Tronex for Call of Chernobyl, Call of Misery, Last Day (2018/3/14)
--]]

--=================================================< Controls >=================================================
local show_about_death = true 			-- show death alerts from other stalkers
local show_about_death_mutant = true 	-- show death alerts from other stalkers about mutant deaths
local show_death_generic = false 		-- show generic death alerts (ie. Dead:)
local show_about_something = true 		-- show general news tips
local show_about_kill_wounded = true 	-- show alerts about wounded enemies, or hostages
local show_about_bounty = true 			-- show stalkers wondering about player's bounty
local show_about_crap = true 			-->> show factions and generic spam.
local show_about_surge = true			-->> show expected surge reports
local show_about_companions = true 		-->> show companions chitchat
local show_about_death_report = true 	-->> show detailed obituary reports (killer,victim,location)
local show_about_response = true 		-->> show stalkers responses on events like finding artifacts, death of friends, trading etc..
local show_about_loot = true 			-->> show stalkers reports about loots
local show_about_environment = true		-->> show stalkers thoughts about time, weather, previous surge.

local cycle_of_TickSpecial = 240 		-->> time cycle (in seconds) of bounty and environment news. (Default time range: 240 to 240*2 sec)
local cycle_of_TickFake = 240			-->> time cycle (in seconds) of surge reports, factions and spam news. (Default Time range: 240 to 240*2 sec)
local cycle_of_TickCompanion = 180		-->> time cycle (in seconds) of companions news. (Default time range: 180 to 180*2 sec)



--=================================================< Preparing >=================================================
--=================================================ui options
TRX_Dynamic_News_Revamp_ex = true

local function axr_val(name, def)
return 10*tonumber(axr_main.config:r_value("mm_news_options",name,2,def))+1
end

local function axr_check(name, def)
return axr_main.config:r_value("mm_news_options",name,1,def)
end

local radio_heli = 50 -- процент радиопереговоров военных при вызове ими вертолёта поддержки
local show_all_factions_news = false --Новости военных и «Монолита»

function trx_ui_options()
	local options = {

["trx_news"] = {typ="text", default="          TRX Dynamic News Revamp         ", cap="tab_gameplay:cap_text_axr", num=4};

["radio_heli"] = {typ="edit", default=50, txt="Helicopter radio communications (in percent)", num=4.1};
["show_all_factions_news"] = {typ="check", default=false, txt="News of the Military and Monolith", num=4.2};

["show_about_death"] = {typ="check", default=true, txt="About the death of stalkers", num=5};
["show_about_death_mutant"] = {typ="check", default=true, txt="About death from mutants", num=5.01};

["show_death_generic"] = {typ="check", default=false, txt="Death notices", num=5.02};
--["show_about_something"] = {typ="check", default=true, txt="Основные новости", num=5.03};

["show_about_kill_wounded"] = {typ="check", default=true, txt="About the wounded and hostages", num=5.04};
["show_about_bounty"] = {typ="check", default=true, txt="About contract killings", num=5.05};

["show_about_crap"] = {typ="check", default=true, txt="Group news and spam", num=5.06};
["show_about_surge"] = {typ="check", default=true, txt="Emissions and Psi Storms", num=5.07};

["show_about_companions"] = {typ="check", default=true, txt="Companions Messages", num=5.08};
["show_about_death_report"] = {typ="check", default=true, txt="Obituaries", num=5.09};
["show_about_response"] = {typ="check", default=true, txt="Event Comments", num=5.1};

["show_about_loot"] = {typ="check", default=true, txt="Finding reports", num=5.2};
["show_about_environment"] = {typ="check", default=true, txt="About the weather and time of day", num=5.3};


["trx_time_random"] = {typ="text", default="Time between TRX news (in tens of seconds)", cap="tab_gameplay:cap_text_axr", num=6};

["cycle_of_tick_special"] = {typ="edit", default=24, txt="About finds, trade, weather", num=6.1};
["cycle_of_tick_fake"] = {typ="edit", default=18, txt="Faction news, discussions, spam", num=6.2};
["cycle_of_tick_companion"] = {typ="edit", default=24, txt="Messages from companions", num=6.3};

	}
	return options
end

function update_options()
	radio_heli = axr_val("radio_heli",50)
	show_all_factions_news = axr_check("show_all_factions_news",false)

	show_about_death = axr_check("show_about_death",true)
	show_about_death_mutant = axr_check("",true)
	show_death_generic = axr_check("show_about_death_mutant",false)
	--show_about_something = axr_check("show_about_something",true)
	show_about_kill_wounded = axr_check("",true)
	show_about_bounty = axr_check("show_about_kill_wounded",true)
	show_about_crap = axr_check("show_about_crap",true)
	show_about_surge = axr_check("show_about_surge",true)
	show_about_companions = axr_check("show_about_companions",true)
	show_about_death_report = axr_check("show_about_death_report",true)
	show_about_response = axr_check("show_about_response",true)
	show_about_loot = axr_check("show_about_loot",true)
	show_about_environment = axr_check("show_about_environment",true)

	cycle_of_TickSpecial = axr_val("cycle_of_tick_special", 24)
	cycle_of_TickFake = axr_val("cycle_of_tick_fake", 24)
	cycle_of_TickCompanion = axr_val("cycle_of_tick_companion", 18)
end

--====================================================ui options end

local TimeFactor = 1	-->> value depends on _G.GAME_VERSION, don't touch

local instance = nil -- don't touch
function get_dynamic_news()
	instance = instance or DynamicNewsManager()
	return instance
end

function destroy_dynamic_news()
	if (instance) then 
		instance:destroy()
	end
	instance = nil
end

function on_game_start()
	
	destroy_dynamic_news()
	
	if (axr_main.config:r_value("mm_options","enable_dynamic_news",1,true) == false) then
		return 
	end
		
	local function on_game_load()
		if _G.GAME_VERSION == "1.4.16" then
			TimeFactor = level.get_time_factor()
		end
		
		get_dynamic_news()
	end 
	RegisterScriptCallback("on_game_load",on_game_load)
end


--==============================================< Class Declaring >==============================================
class "DynamicNewsManager"
function DynamicNewsManager:__init()

	-- Get player's faction
	local comm = db.actor:character_community()
	if (comm ~= "actor") then 
		comm = comm:sub(7) -- remove 'actor_' prefix
	end
	
	self.channel_status = {
		["general"]			= true,
		["stalker"]  		= true,
		["monolith"] 		= (comm == "monolith") or show_all_factions_news,
		["csky"]   			= true,
		["army"] 			= (comm == "army") or show_all_factions_news,
		["killer"]   		= true,
		["ecolog"]   		= true,
		["dolg"]    		= true,
		["freedom"]  		= true,
		["bandit"]   		= true,
	}

	self.queue = {
		["general"]			= {},
		["stalker"]  		= {},
		["monolith"] 		= {},
		["csky"]   			= {},
		["army"] 			= {},
		["killer"]   		= {},
		["ecolog"]   		= {},
		["dolg"]    		= {},
		["freedom"]  		= {},
		["bandit"]   		= {}
	}
	
	self.response = {
		["type"] = false,
		["who"] = false,
		["message"] = false
	}
	
	self.spammer = {	
		["show_about_death"] = 0,
		["show_about_kill_wounded"] = 0,
		["show_about_death_mutant"] = 0,
		["show_about_death_response"] = 0,
		["show_about_loot"] = 0
	}
	
	self.loot = {}
	self.companions_list = dynamic_news_helper.list_actor_squad_by_id()
	self.news_toggle = xr_conditions.surge_complete()
	self.surge_shift = not xr_conditions.surge_started()
	self.surge_type = ""
	
	self.sentences_fnames = self:ReadTextList("name_stalker_")
	self.sentences_snames = self:ReadTextList("lname_stalker_")
	

	CreateTimeEvent("DynamicNewsManager","TickNews",10*TimeFactor,self.TickNews,self)
	CreateTimeEvent("DynamicNewsManager","TickSpecial",10*TimeFactor,self.TickSpecial,self)
	CreateTimeEvent("DynamicNewsManager","TickCompanion",10*TimeFactor,self.TickCompanion,self)
	CreateTimeEvent("DynamicNewsManager","TickFake",10*TimeFactor,self.TickFake,self)
	CreateTimeEvent("DynamicNewsManager","TickQuick",10*TimeFactor,self.TickQuick,self)
	
	RegisterScriptCallback("monster_on_death_callback",self)
	--RegisterScriptCallback("monster_on_net_spawn",self)	
	RegisterScriptCallback("npc_on_death_callback",self)
	--RegisterScriptCallback("npc_on_hear_callback",self)
	RegisterScriptCallback("npc_on_get_all_from_corpse",self)
end

function DynamicNewsManager:destroy()
	
	RemoveTimeEvent("DynamicNewsManager","TickNews")
	RemoveTimeEvent("DynamicNewsManager","TickSpecial")
	RemoveTimeEvent("DynamicNewsManager","TickCompanion")
	RemoveTimeEvent("DynamicNewsManager","TickFake")
	RemoveTimeEvent("DynamicNewsManager","TickQuick")
	
	UnregisterScriptCallback("monster_on_death_callback",self)
	--UnregisterScriptCallback("monster_on_net_spawn",self)
	UnregisterScriptCallback("npc_on_death_callback",self)
	--UnregisterScriptCallback("npc_on_hear_callback",self)
	UnregisterScriptCallback("npc_on_get_all_from_corpse",self)
end

function DynamicNewsManager:TickNews()
	if (axr_main.config:r_value("mm_options","enable_dynamic_news",1,true) == false) then
		return true
	end
	
	ResetTimeEvent("DynamicNewsManager","TickNews",math.random(5,20)*TimeFactor) -- reset the timer, the function will get called again after 5 ~ 20 sec
	--printf(">>> Tronex: TickNews start")
	
	-- news state check
	if self:NewsToggle() then
		return false
	end
	
	for ch,messages in pairs(self.queue) do
		local c = #messages
		local message = messages[c]
		if (message) then
			dynamic_news_helper.send_tip(message.Mg,message.Se, nil, nil,message.Ic,message.Snd,message.It)	-- send the news
			
			-->> Prepare proper response
			if message.Ty then -->> if there is a (type) from the current sent message, we send response message
				self.response["type"] = message.Ty
				if message.Id then 
					self.response["who"] = message.Id 
				end
				ResetTimeEvent("DynamicNewsManager","TickQuick",math.random(5,6)*TimeFactor)
			end
			
			messages[c] = nil -- dump the message
			return false
		end
	end
	
	return false
end

function DynamicNewsManager:TickSpecial()
	if (axr_main.config:r_value("mm_options","enable_dynamic_news",1,true) == false) then
		return true
	end
	
	ResetTimeEvent("DynamicNewsManager","TickSpecial",math.random(cycle_of_TickSpecial, cycle_of_TickSpecial*2)*TimeFactor)
	--printf(">>> Tronex: TickSpecial start")
	
	-- news state check
	if self:NewsToggle() then
		return false
	end
		
	-- pick news	
	local l = math.random(100)
	if (l < 20) then
		self:GossipWeather()
	elseif (l >= 20) and (l < 40) then
		self:GossipTime()
	else
		self:GossipBounty()
	end
	
	return false
end

function DynamicNewsManager:TickCompanion()
	if (axr_main.config:r_value("mm_options","enable_dynamic_news",1,true) == false) then
		return true
	end
	
	if not show_about_companions then
		return true
	end
	
	ResetTimeEvent("DynamicNewsManager","TickCompanion",math.random(cycle_of_TickCompanion, cycle_of_TickCompanion*2)*TimeFactor)
	--printf(">>> Tronex: TickCompanion start")
	
	-- news state check
	if self:NewsToggle() then
		return false
	end
	
	-- check new and older companions
	local is_new, sender, st, npc
	is_new = true
	sender = self:PickNewCompanion()
	if not sender then
		is_new = false
		sender = self:PickCompanion()
	end
	if sender then 
		st = db.storage[sender.id]
		npc = st and st.object
	else
		--printf(">>> Tronex: no companions got picked")
		return false
	end
	
	-- pick news	
	if is_new then -- new companions news
		self:CompanionAboutActor(sender)
	elseif (sender.position:distance_to(db.actor:position()) < 15) and (not npc:best_enemy()) then -- companions news
		if (math.random(3) == 2) then	-- %30
			self:CompanionAboutLevel(sender)
		else
			self:CompanionAboutLife(sender)
		end
	end
	
	return false
end

function DynamicNewsManager:TickFake()
	if (axr_main.config:r_value("mm_options","enable_dynamic_news",1,true) == false) then
		return true
	end
	
	ResetTimeEvent("DynamicNewsManager","TickFake",math.random(cycle_of_TickFake, cycle_of_TickFake*2)*TimeFactor)
	--printf(">>> Tronex: TickFake start")
	
	-- news state check
	if self:NewsToggle() then
		return false
	end
	
	-- welcome message on new game, run once
	if not has_alife_info("start_info") then
		self:WelcomeToNetwork()
		db.actor:give_info_portion("start_info") 
		return false
	end
	
	-- pick news
	local l = math.random(100)
	if show_about_surge and l < 20 then
		self:ReportNextEmission()
	elseif show_about_crap then
		l = math.random(100)
		if l < 30 then
			self:SpamFaction()
		elseif l >= 30 and l < 50 then
			self:SpamDead()
		else
			self:SpamRandom()
		end
	end
	
	return false
end

function DynamicNewsManager:TickQuick()
	if (axr_main.config:r_value("mm_options","enable_dynamic_news",1,true) == false) or (not show_about_response) then
		return true
	end
	
	ResetTimeEvent("DynamicNewsManager","TickQuick",3600*TimeFactor)
	--printf(">>> Tronex: TickQuick start")
	
	-- news state check
	if self:NewsToggle() then
		return false
	end
	
	-- pick news
	if (self.response["type"] == "artifact") and (self.response["who"]) then
		self:ResponseOnFoundArtefact(self.response["who"])
		
	elseif (self.response["type"] == "trade") and (self.response["who"]) then
		self:ResponseOnBoughtItems(self.response["who"])
		
	elseif  (self.response["type"] == "loot") and (self.response["who"]) and (#self.loot > 0) then
		self:GossipLoot(self.response["who"],self:GetLootBestItem(self.loot),self:GetLootValue(self.loot))
		local c = #self.loot
		if (c > 0) then
			for i=1,c do
				self.loot[i] = nil
			end
		end
		
	elseif (self.response["type"] == "death_by_stalker") then
		local l = math.random(100)
		if (l < 45) then -- %45 chance
			if (self.response["who"]) then
				self:ResponseOnDeathByStalker(self.response["who"])
			end
		elseif (l > 60) then -- %40 chance
			self:ResponseOnDeathByStalker_Fake()
		end
		
	elseif (self.response["type"] == "death_by_mutant") then
		local l = math.random(100)
		if (l < 45) then
			if (self.response["who"]) then
				self:ResponseOnDeathByMutant(self.response["who"])
			end
		elseif (l > 60) then
			self:ResponseOnDeathByMutant_Fake()
		end
		
	elseif (self.response["type"] == "death_by_surge") then
		--if math.random(2) == 1 then -- %50 chance
			--if (self.response["who"]) then
				--self:ResponseOnDeathBySurges(self.response["who"])
			--end
		--else
			self:ResponseOnDeathBySurges_Fake()
		--end
	end
	
	-- send news
	local message = self.response["message"]
	if (message) then
		dynamic_news_helper.send_tip(message.Mg, message.Se, message.To, message.St, message.Ic, message.Snd, message.It)	-- (message,name,nil,nil,faction (default),sound,icon (use default icon))
	end
	
	-- reset
	self.response["type"] = false
	self.response["who"] = false
	self.response["message"] = false
	
	return false
end


	
--=================================================< Callbacks >=================================================
function DynamicNewsManager:monster_on_net_spawn(npc,se_obj)

end 

function DynamicNewsManager:monster_on_death_callback(victim,who)
	--printf(">>> Tronex: monster_on_death_callback callback")
	if not (who and IsStalker(who) and show_about_death_mutant) then	-- if the killer is unknown, go back
		return 
	end
	
	local say = false
	if (self.spammer.show_about_death_mutant == 0) then
		local l = math.random(1,2)	-- %50 chance
		if l == 1 then
			say = self:GossipDeathOfMutant(victim,who)
		elseif l == 2 then 
			say = self:SeenDeathOfMutant(victim,who)
		end
	end
	
	if (say) then
		self.spammer.show_about_death_mutant = self.spammer.show_about_death_mutant + 1
		if (self.spammer.show_about_death_mutant > 3) then
			self.spammer.show_about_death_mutant = 0
		end
	end
end

function DynamicNewsManager:npc_on_death_callback(victim,who)
	--printf(">>> Tronex: npc_on_death_callback callback")
	if not (db.actor and victim and show_about_death) then 
		return 
	end
	
	local comm = character_community(victim)
	if not (self.channel_status[comm]) then 
		return 
	end
	
	if not (who and who.clsid) then 
		if (show_death_generic and surge_manager.is_killing_all()) then
			self:DeathBySurge(victim,who,comm)
		end 
		return
	end
	
	if show_about_death_report and (self.spammer.show_about_death_response == 1) then
		if IsStalker(who) then
			self:ReportDeathByStalker(victim,who)
		elseif IsMonster(who) then
			self:ReportDeathByMutant(victim,who)
		end
	end

	local say = false
	if (self.spammer.show_about_death == 0) then
		if (IsStalker(who)) then
			say = self:SOSDeathByStalker(victim,who,comm)
			if not (say) then -- if a stalker is NOT reporting on-going attack on him
				local i = show_death_generic and math.random(1,3) or math.random(2,3)
				if i == 1 then
					self:DeathByStalker(victim,who,comm)
				elseif i == 2 then
					self:GossipDeathByStalker(victim,who)
				elseif i == 3 then
					self:SeenDeathOfStalker(victim,who,comm)
				end
			end
		elseif (IsMonster(who)) then
			say = self:SOSDeathByMutant(victim,who,comm)
			if not (say) then
				local k = show_death_generic and math.random(1,2) or 2
				if k == 1 then
					self:DeathByMutant(victim,who,comm)
				elseif k == 2 then 
					self:SeenDeathByMutant(victim,who,comm)
				end
			end
		end
	end
	
	-- reset
	if (say) then
		self.spammer.show_about_death = self.spammer.show_about_death + 1 -- 0,1,2,3,4
		if (self.spammer.show_about_death > 3) then
			self.spammer.show_about_death = 0
		end
	end
	
	self.spammer.show_about_death_response = self.spammer.show_about_death_response + 1 --0,1,2
	if (self.spammer.show_about_death_response > 2) then
		self.spammer.show_about_death_response = 0
	end
end

function DynamicNewsManager:npc_on_hear_callback(npc,who_id,s_type,sound_dist,sound_power,sound_position)

end

function DynamicNewsManager:npc_on_get_all_from_corpse(npc,corpse_npc,item,lootable_table) -- The looter, the looted and the loot.
	--printf(">>> Tronex: npc_on_get_all_from_corpse callback")
	if not (show_about_loot and db.actor and npc and item) then 
		return 
	end
	
	table.insert(self.loot,item)
	self.response["who"] = npc
	self.response["type"] = "loot"
	
	--self:GossipLoot(npc,item)
	ResetTimeEvent("DynamicNewsManager","TickQuick",4*TimeFactor)
	
end


--=================================================< Utility >===================================================
function DynamicNewsManager:PushToChannel(name,t,fifo) -- (name = faction , t = {message (translated), sender icon, news sound, name and faction of the sender, icon indicator (if its "npc" then use sender's icon), Type of news, Id of sender} , fifo = not used)
	--printf(">>> Tronex: PushToChannel call")
	-- news state check
	if self:NewsToggle() then -- necessary to prevent news stacking after surges.
		return false
	end
	
	local q = self.queue[name]	-- load the faction table in queue table
	if (q) then
		if (t.Mg) then 
			for s in string.gmatch(t.Mg,"(st_dyn_news_ch_[%w%d_]*)") do
				t.Mg = string.gsub(t.Mg,s,game.translate_string(s))
			end
		end
		if (fifo) then
			q[#q+1] = t
		else
			table.insert(q,1,t)
		end
	end
end

function DynamicNewsManager:FindSpeakerNoVictim(who,same_as_who,not_in_combat) -- Find the news speaker (victim is not needed)
	local comm_sender
	local comm_who = who and character_community(who) or nil
	local who_id = who and who:id() or nil
	local t = {}
	for i=1, #db.OnlineStalkers do
		if (who_id == nil) or (db.OnlineStalkers[i] ~= who_id) then
			local st = db.storage[db.OnlineStalkers[i]]
			local npc = st and st.object or level.object_by_id(db.OnlineStalkers[i])
			if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i])) then
				if (not_in_combat == nil) or (not_in_combat == true and not npc:best_enemy()) or (not_in_combat ~= true) then
					comm_sender = npc:character_community()
					if (same_as_who == nil) or (comm_who == nil) or (same_as_who == true and comm_sender == comm_who) or (same_as_who == false and comm_sender ~= comm_who) then
						if (self.channel_status[comm_sender]) then
							table.insert(t,npc)
						end
					end
				end
			end
		end
	end
	return t[math.random(#t)] -- return random legit npc
end

function DynamicNewsManager:FindSpeaker(victim,who,same_as_victim,same_as_who,not_in_combat,can_see) -- Find the news speaker
	local comm = character_community(victim)
	local comm_sender
	local comm_who = character_community(who)
	local who_id = who:id()
	local t = {}
	for i=1, #db.OnlineStalkers do
		if (db.OnlineStalkers[i] ~= who_id) then
			local st = db.storage[db.OnlineStalkers[i]]
			local npc = st and st.object
			if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i])) then
				if (not_in_combat == nil) or (not_in_combat == true and not npc:best_enemy()) or (not_in_combat ~= true) then
					comm_sender = npc:character_community()
					if (same_as_victim == nil) or (same_as_victim == true and comm_sender == comm) or (same_as_victim == false and comm_sender ~= comm) then
						if (same_as_who == nil) or (same_as_who == true and comm_sender == comm_who) or (same_as_who == false and comm_sender ~= comm_who) then
							if (self.channel_status[comm_sender]) then
								if (can_see == nil) or (can_see and npc:see(victim)) or (can_see == false) then
									table.insert(t,npc)
								end
							end
						end
					end
				end
			end
		end
	end
	return t[math.random(#t)]	-- pick a random reliable npc to return
end

function DynamicNewsManager:FindSpeakerWithEnemy(victim,who,same_as_victim,same_as_who,can_see) -- Find the news speaker (with enemy around)
	local comm = character_community(victim)
	local comm_sender
	local comm_who = character_community(who)
	local who_id = who:id()
	local t = {}
	for i=1, #db.OnlineStalkers do
		if (db.OnlineStalkers[i] ~= who_id) then
			local st = db.storage[db.OnlineStalkers[i]]
			local npc = st and st.object
			if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i]) and npc:best_enemy()) then
				comm_sender = npc:character_community()
				if (same_as_victim == nil) or (same_as_victim == true and comm_sender == comm) or (same_as_victim == false and comm_sender ~= comm) then
					if (same_as_who == nil) or (same_as_who == true and comm_sender == comm_who) or (same_as_who == false and comm_sender ~= comm_who) then
						if (self.channel_status[comm_sender]) then
							if (can_see == nil) or (can_see and npc:see(victim)) or (can_see == false) then
								table.insert(t,npc)
							end
						end
					end
				end
			end
		end
	end
	return t[math.random(#t)]
end

function DynamicNewsManager:FindSpeakerRandom(not_in_combat) -- Find the news speaker (victim is not needed)
	local comm_sender
	local t = {}
	for i=1, #db.OnlineStalkers do
		local st = db.storage[db.OnlineStalkers[i]]
		local npc = st and st.object or level.object_by_id(db.OnlineStalkers[i])
		if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i])) then
			if (not_in_combat == nil) or (not_in_combat == true and not npc:best_enemy()) or (not_in_combat ~= true) then
				comm_sender = npc:character_community()
				if (self.channel_status[comm_sender]) then
					table.insert(t,npc)
				end
			end
		end
	end
	return t[math.random(#t)]
end


--==================================================< News >=====================================================
function DynamicNewsManager:GossipBounty() -- Find the bounty
	if not (show_about_bounty) then 
		return 
	end

	local bounty
	for task_id,npc_id in pairs(axr_task_manager.bounties_by_id) do	-- loop across npcs on task list
		bounty = db.storage[npc_id] and db.storage[npc_id].object
		if (bounty and bounty:alive()) then 
			break 
		end
	end
	
	if not (bounty and bounty:alive()) then	-- if the bounty npc is dead, return
		return false
	end

	local sender = self:FindSpeakerNoVictim(bounty,false,true)
	if (not sender) then
		--printf("GossipBounty can't find sender")
		return false
	end
	
	local tbl = self:ReadTextList("st_dyn_news_gossip_bounty_")
	if (not tbl_1) then
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = self:ReadTextKeyList( tbl[math.random(#tbl)] , { ["who"]=bounty:character_name() , ["where"]=dynamic_news_helper.GetPointDescription(bounty) } )
	
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:RadioInHeli(sender,who)	-- Requesting chopper assistance
	local a = dynamic_news_helper.GetPointDescription(who) 
	local b = IsStalker(who) and dynamic_news_helper.GetCommunityDescription(who,math.random(1,2)) or dynamic_news_helper.GetMonsterDescription(who,6)
	local tbl = self:ReadTextList("st_dyn_news_gossip_heli_")
	if (not tbl_1) then
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = self:ReadTextKeyList( tbl[math.random(#tbl)] , { ["where"]=a , ["what"]=b } )

	if math.random(1,99) < radio_heli then	
	self:PushToChannel("general",{Mg=msg,Ic=sender:character_icon(),Snd="helicopter",Se=Se,It="npc"})
	else
	self:PushToChannel("general",{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	end
	
	return true
end

function DynamicNewsManager:DeathBySurge(victim,who,comm) -- Death by blowouts reports
	local msg = strformat("%c[255,160,160,160]%s, %s.\\n%c[default]st_dyn_news_ch_found %s. st_dyn_news_ch_blowout.",victim:character_name(),game.translate_string(comm),dynamic_news_helper.GetPointDescription(victim))
	self:PushToChannel("general",{Mg=msg,Ic="deth",Snd="news",Se=game.translate_string("st_dyn_news_ch_died"),It="gr",Ty="death_by_surge",Id=victim})
	return true
end

function DynamicNewsManager:DeathByStalker(victim,who,comm) -- Found dead stalker by stalker
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	local msg = strformat("%c[255,160,160,160]%s, %s.\\n%c[default]st_dyn_news_ch_found %s. %s.",victim:character_name(),game.translate_string(comm),dynamic_news_helper.GetPointDescription(victim),dynamic_news_helper.GetWeaponDescription(victim,1))
	self:PushToChannel("general",{Mg=msg,Ic="deth",Snd="news",Se=game.translate_string("st_dyn_news_ch_died"),It="gr",Ty="death_by_stalker",Id=victim})
	return true
end

function DynamicNewsManager:DeathByMutant(victim,who,comm) -- Found dead stalker by mutant
	local a = victim:character_name()
	local b = game.translate_string(comm)
	local c = dynamic_news_helper.GetPointDescription(victim)
	local d = dynamic_news_helper.GetMonsterDescription(who,7)
	local msg = strformat("%c[255,160,160,160]%s, %s.\\n%c[default]st_dyn_news_ch_found %s. %s.",a,b,c,d)
	self:PushToChannel("general",{Mg=msg,Ic="deth",Snd="news",Se=game.translate_string("st_dyn_news_ch_died"),It="gr",Ty="death_by_mutant",Id=victim})
	return true
end 

function DynamicNewsManager:GossipDeathByStalker(victim,who) -- hearing stalker killing a stalker
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeaker(victim,who,false,nil,true)
	if (not sender) then
		--printf("GossipDeathByStalker can't find sender")
		return false
	end
	
	local tbl_1 = self:ReadTextList("st_dyn_news_builder_hear_")
	local tbl_2 = self:ReadTextList("st_dyn_news_builder_ending_")
	if (not tbl_1) or (not tbl_2) then
		return false
	end
	
	local a = tbl_1[math.random(#tbl_1)]
	local b = dynamic_news_helper.GetWeaponDescription(who,2)
	local c = dynamic_news_helper.GetPointDescription(victim)
	local d = tbl_2[math.random(#tbl_2)]

	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = strformat("%s %s %s. %s",a,b,c,d)
	
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:SOSDeathByStalker(victim,who,comm) -- stalker under stalkers attack
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeakerWithEnemy(victim,who,true,false)
	if (not sender) then
		--printf("SOSDeathByStalker can't find sender")
		return false
	end
	
	local a = dynamic_news_helper.GetCommunityDescription(sender,math.random(11,14))
	local b,c = self:BuildSentenceStalkerEnemy(victim,who,0,30)
	local d = dynamic_news_helper.GetPointDescription(victim)

	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = strformat("%s %s %s %s!",a,b,c,d)
	
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:SeenDeathOfStalker(victim,who,comm) -- seeing stalker killing a stalker
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeaker(victim,who,false,false,true)
	if (not sender) then
		--printf("SeenDeathOfStalker can't find sender")
		return false
	end
	
	local tbl = self:ReadTextList("st_dyn_news_builder_sight_")
	if (not tbl) then
		return false
	end
	
	local a = tbl[math.random(#tbl)]
	local b = dynamic_news_helper.GetCommunityDescription(who,math.random(1,2))
	local c = dynamic_news_helper.GetWeaponDescription(who,math.random(4,8))
	local d = dynamic_news_helper.GetCommunityDescription(victim,math.random(3,4))
	local e = dynamic_news_helper.GetPointDescription(victim)
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = strformat("%s %s %s %s %s.",a,b,c,d,e)
	
	self:PushToChannel("general",{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:SeenDeathOfMutant(victim,who) -- seeing stalker killing a mutant
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeaker(victim,who,nil,false,true)
	if (not sender) then
		--printf("SeenDeathOfMutant can't find sender")
		return false
	end
	
	local tbl = self:ReadTextList("st_dyn_news_builder_sight_")
	if (not tbl) then
		return false
	end
	
	local a = tbl[math.random(#tbl)]
	local b = dynamic_news_helper.GetCommunityDescription(who,math.random(1,2))
	local c = dynamic_news_helper.GetWeaponDescription(who,math.random(4,6))
	local d = dynamic_news_helper.GetMonsterDescription(victim,1)
	local e = dynamic_news_helper.GetPointDescription(victim)
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = strformat("%s %s %s %s %s.",a,b,c,d,e)	-- example "I just saw" "a loner" "shots" "a bloodsucker" "north east of road to rostok"
	
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:SeenDeathByMutant(victim,who,comm) -- seeing stalker killed by a mutant
	local sender = self:FindSpeaker(victim,who,false,nil,true)
	if (not sender) then
		--printf("SeenDeathByMutant can't find sender")
		return false
	end
	
	local tbl_1 = self:ReadTextList("st_dyn_news_builder_hear_") -->> was sight
	local tbl_2 = self:ReadTextList("st_dyn_news_builder_middle_")
	local tbl_3 = self:ReadTextList("st_dyn_news_builder_ending_")
	if (not tbl_1) or (not tbl_2) or (not tbl_3) then
		return false
	end

	local a = tbl_1[math.random(#tbl_1)]
	local b = tbl_2[math.random(#tbl_2)]
	local c = dynamic_news_helper.GetPointDescription(victim)
	local d = tbl_3[math.random(#tbl_3)]
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = strformat("%s %s %s.\\n%s",a,b,c,d)
	
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end 

function DynamicNewsManager:GossipDeathOfMutant(victim,who,comm) -- hearing stalker killing a mutant
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeaker(victim,who,nil,false,true)
	if (not sender) then
		--printf("GossipDeathByStalker can't find sender")
		return false
	end
	
	local tbl_1 = self:ReadTextList("st_dyn_news_builder_hear_")
	local tbl_2 = self:ReadTextList("st_dyn_news_builder_ending_")
	if (not tbl_1) or (not tbl_2) then
		return false
	end
	
	local a = tbl_1[math.random(#tbl_1)]
	local b = dynamic_news_helper.GetWeaponDescription(who,2)
	local c = dynamic_news_helper.GetPointDescription(victim)
	local d = tbl_2[math.random(#tbl_2)]
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = strformat("%s %s %s. %s",a,b,c,d)
	
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	
	return true
end 

function DynamicNewsManager:SOSDeathByMutant(victim,who) -- stalker under mutants attack
	local sender = self:FindSpeakerWithEnemy(victim,who,true,nil)
	if (not sender) then
		--printf("SOSDeathByMutant can't find sender")
		return false
	end
	
	local a = dynamic_news_helper.GetCommunityDescription(sender,math.random(11,14))
	local b = dynamic_news_helper.GetMonsterDescription(who,math.random(2,5))
	local c = dynamic_news_helper.GetPointDescription(victim)

	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = strformat("%s %s %s!",a,b,c)
	
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:FoundArtefact(sender,itm) -- stalker found an artifact
	--printf(">>> Tronex: FoundArtefact call")
	local inv_name = game.translate_string(system_ini():r_string_ex(itm:section(),"inv_name") or "")
	local tbl = self:ReadTextList("st_dyn_news_gossip_arte_")
	if (not tbl) then
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))	
	local msg = self:ReadTextKeyList( tbl[math.random(#tbl)] , { ["what"]=inv_name } )

	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc",Ty="artifact", Id=sender})
	
	return true
end

function DynamicNewsManager:BoughtItems(sender,who,list) -- Trading
	local sec = list[math.random(#list)]
	local inv_name = game.translate_string(system_ini():r_string_ex(sec,"inv_name") or "")
	local tbl = self:ReadTextList("st_dyn_news_gossip_buy_")
	if (not tbl) then
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = self:ReadTextKeyList( tbl[math.random(#tbl)] , { ["who"]=who:character_name() , ["what"]=inv_name } )

	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc",Ty="trade", Id=sender})
	
	return true
end

function DynamicNewsManager:KillWounded(sender,victim,is_hostage) -- killing a wounded stalker
	if not (show_about_kill_wounded) then 
		return false
	end
	
	local squad = get_object_squad(sender)
	if not (squad and squad:commander_id() == sender:id()) then
		return false
	end
	
	if (self.spammer.show_about_kill_wounded == 0) then
		local tbl
		if not (is_hostage) then
			tbl = self:ReadTextList("st_dyn_news_gossip_kill_wounded_")
		else 
			tbl = self:ReadTextList("st_dyn_news_gossip_hostage_")			
		end
		if (not tbl) then
			return false
		end
		
		local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
		self:PushToChannel(sender:character_community(),{Mg=tbl[math.random(#tbl)],Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
		
		return true
	end
	
	self.spammer.show_about_kill_wounded = self.spammer.show_about_kill_wounded + 1 
	if (self.spammer.show_about_kill_wounded  > 10) then
		self.spammer.show_about_kill_wounded  = 0
	end
end 

function DynamicNewsManager:GossipTaskRepeatTimeout(task_id)
	local story_id = task_id:sub(1,-8)
	local obj = get_story_object(story_id)
	if not (obj) then 
		return false 
	end
	
	local sender = self:FindSpeakerNoVictim(nil,nil,true)
	if (not sender) then 
		return false 
	end
	
	local tbl = self:ReadTextList("st_dyn_news_gossip_hostage_")
	if (not tbl) then
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = strformat(tbl[math.random(#tbl)],obj:character_name())
	
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})

	return true
end

function DynamicNewsManager:ReportDeathByStalker(victim,who) -- Death Report of stalker killing stalker
	--printf(">>> Tronex: ReportDeathByStalker call")
	local clr_1 = "%" .. dynamic_news_helper.GetColor(10)
	local clr_2 = "%" .. dynamic_news_helper.GetColor(11)
	local a = game.translate_string(who:character_community())
	local b = game.translate_string(victim:character_community())
	local c = dynamic_news_helper.GetPointDescription(victim)
	
	local Se = game.translate_string("st_dyn_news_sender_obituary")
	local msg = self:ReadTextKeyList( game.translate_string("st_dyn_news_spc_obituary_s") , {["clr_1"]=clr_1 , ["clr_2"]=clr_2 , ["who_name"]=who:character_name() , ["who_comm"]=a , ["victim_name"]=victim:character_name() , ["victim_comm"]=b , ["where"]=c} )
	
	self:PushToChannel("general",{Mg=msg,Ic="death",Snd="no_sound",Se=Se,It="gr",Ty="death_by_stalker",Id=victim})
	
	return true
end

function DynamicNewsManager:ReportDeathByMutant(victim,who) -- Death Report by mutant killing stalker
	--printf(">>> Tronex: ReportDeathByMutant call")
	local clr_1 = "%" .. dynamic_news_helper.GetColor(10)
	local clr_2 = "%" .. dynamic_news_helper.GetColor(11)
	local a = dynamic_news_helper.GetMonsterDescription(who,7)
	local b = game.translate_string(victim:character_community())
	local c = dynamic_news_helper.GetPointDescription(victim)
	
	local Se = game.translate_string("st_dyn_news_sender_obituary")
	local msg = self:ReadTextKeyList( game.translate_string("st_dyn_news_spc_obituary_m") , {["clr_1"]=clr_1 , ["clr_2"]=clr_2 , ["victim_name"]=victim:character_name() , ["victim_comm"]=b , ["who"]=a , ["where"]=c} )
	
	self:PushToChannel("general",{Mg=msg,Ic="death",Snd="no_sound",Se=Se,It="gr",Ty="death_by_mutant",Id=victim})
	
	return true
end

function DynamicNewsManager:ReportDeathBySurge() -->> Report casualties of surges (fake)
	--printf(">>> Tronex: ReportDeathBySurge call")
	if (not show_about_death_report) then
		return false
	end
	
	if (not show_about_death_report) and ((not self.sentences_fnames) or (not self.sentences_fnames)) then
		return false
	end
	
	local clr_1 = dynamic_news_helper.GetColor(10)
	local clr_2 = dynamic_news_helper.GetColor(11)
	local known_num = math.random (4,9)
	local msg = clr_1 .. game.translate_string("st_dyn_news_death_by_surge_start") .. clr_2
	local finish = self:ReadTextKeyList( game.translate_string("st_dyn_news_death_by_surge_end") , { ["num"] = tostring(math.random(5,30)) } )
	local a,b,c,y1,y2,z1,z2,z3
	
	for i=1,known_num do
		a = self.sentences_fnames[math.random(#self.sentences_fnames)]
		b = self.sentences_snames[math.random(#self.sentences_snames)]
		while true do
		c = dynamic_news_helper.GetMap(math.random(15,30),1)	-- don't change the map orders
			if c ~= level.name() then break end
		end
		c = game.translate_string(c)
		y1 = string.char(math.random(65,90))
		y2 = string.char(math.random(65,90))
		z1 = tostring(math.random(9))
		z2 = tostring(math.random(9))
		z3 = tostring(math.random(9))
		msg = msg .. strformat("\\n%s-%s %s%s-%s%s%s, %s %s, %s.",clr_1,clr_2,y1,y2,z1,z2,z3,a,b,c)
	end
	
	local Se = game.translate_string("st_dyn_news_sender_obituary")
	msg = msg .. "\\n" .. clr_1 .. finish
	
	dynamic_news_helper.send_tip(msg,Se,30,15,"death","beep_2","gr")
	
	-->> special case for response message
	self.response["type"] = "death_by_surge"
	ResetTimeEvent("DynamicNewsManager","TickQuick",math.random(5,6)*TimeFactor)
	
	return true
end

function DynamicNewsManager:ReportNextEmission() -->>  News about expected surge's date (fake)
	--printf(">>> Tronex: ReportNextEmission call")
	local SM, SurgeType, last_surge_time, AccuracyTier, comm, Se, clr, msg, a, b, c, d, Tbl_msg
	local IsEmission, IsPsiStorm = false, false
	
	-- %50 chance, pick blowout or psi-storm
	if (math.random(2) == 1) then 
		SurgeType = game.translate_string("st_dyn_news_surge_type_emission")
		SM = surge_manager and surge_manager.SurgeManager
		if (atmosfear_options.config:r_value("atmosfear_current_parameters","opt_enable_blowout",2,1)==1) and (SM ~= nil and SM._delta ~= nil and not SM.started) then	-- if blowouts are enabled
			last_surge_time = SM and SM.last_surge_time or game.get_game_time()
			IsEmission = true
		end
	else
		SurgeType = game.translate_string("st_dyn_news_surge_type_psi")
		SM = psi_storm_manager and psi_storm_manager.PsiStormManager
		if (atmosfear_options.config:r_value("atmosfear_current_parameters","opt_enable_psi_storm",2,1)==1) and (SM ~= nil and SM._delta ~= nil and not SM.started) then
			last_surge_time = SM and SM.last_psi_storm_time or game.get_game_time()
			IsPsiStorm = true
		end
	end
	
	if IsEmission or IsPsiStorm then
		local g_time = game.get_game_time()	-- the current time
		local surge_start = SM and math.floor(SM._delta - g_time:diffSec(last_surge_time))	-- time "till" next blowout (in second) = ( time of next surge[SCOPED] - (current time - last surge time)[SCOPED] )
		
		-- %50 chance, pick News from people or natural faction
		if math.random(2) == 1 then
			if (not self.sentences_fnames) or (not self.sentences_fnames) then
				return false
			end
			comm = "common"
			Se = strformat("%s %s", self.sentences_fnames[math.random(#self.sentences_fnames)] , self.sentences_snames[math.random(#self.sentences_snames)] )
			Tbl_msg = self:ReadTextList("st_dyn_news_surge_template_")
			if (not Tbl_msg) then return false end
			a = Tbl_msg[math.random(#Tbl_msg)]
			b = dynamic_news_helper.GetTimeString(math.floor(surge_start/3600), math.random(4))
			if (a and b and SurgeType) then
				msg = self:ReadTextKeyList( a , {["what"]=SurgeType , ["when"]=b} )
			end
		else
			comm, Se, clr = dynamic_news_helper.GetRandomNaturalFaction(3)
			Se = Se .. ", " .. game.translate_string("st_dyn_news_sender_private_ch")
			if ((comm == "ecolog") or (comm == "csky") or (comm == "dolg") or (comm == "army")) then 
				AccuracyTier = 5
			else 
				AccuracyTier = math.random(5)
			end
			Tbl_msg = self:ReadTextList("st_dyn_news_surge_builder_start_" .. comm .. "_")
			if (not Tbl_msg) then return false end
			a = Tbl_msg[math.random(#Tbl_msg)]
			Tbl_msg = self:ReadTextList("st_dyn_news_surge_builder_mid_")
			if (not Tbl_msg) then return false end
			b = Tbl_msg[math.random(#Tbl_msg)]
			Tbl_msg = self:ReadTextList("st_dyn_news_surge_builder_end_" .. comm .. "_")
			if (not Tbl_msg) then return false end
			d = Tbl_msg[math.random(#Tbl_msg)]
			c = dynamic_news_helper.GetTimeString(math.floor(surge_start/3600), AccuracyTier)
			if (a and b and c and d and SurgeType) then
				local msg_mid = self:ReadTextKeyList( b , {["what"]=SurgeType , ["when"]=c} )
				msg = self:ReadTextKeyList( "$start $mid. $end." , {["start"]=a , ["mid"]=msg_mid , ["end"]=d} )
			end
		end
	end
	
	if not (msg and comm and Se) then
		return false
	end
	
	dynamic_news_helper.send_tip(msg,Se, nil, nil,comm,"beep_1","gr")
	
	return true
end

function DynamicNewsManager:SpamFaction() -->> faction's news (fake)
	--printf(">>> Tronex: SpamFaction call")
	local comm,Se,clr_1 = dynamic_news_helper.GetRandomFaction(3)
	
	local tbl = self:ReadTextList("st_dyn_news_spam_faction_" .. comm .. "_")
	if (not tbl) then
		return false
	end
	
	dynamic_news_helper.send_tip(tbl[math.random(#tbl)],Se, nil, nil,comm,"beep_1","gr")
	
	return true
end

function DynamicNewsManager:SpamRandom() -->> Talk about life (fake)
	--printf(">>> Tronex: SpamRandom call")
	local clr_1 = "%" .. dynamic_news_helper.GetColor(10)
	local clr_2 = "%" .. dynamic_news_helper.GetColor(11)
	local tbl = self:ReadTextList("st_dyn_news_spam_")
	if (not tbl) then
		return false
	end
	
	local Se = game.translate_string("st_dyn_news_sender_com_centre")
	local msg = self:ReadTextKeyList( tbl[math.random(#tbl)] , {["clr_1"]=clr_1 , ["clr_2"]=clr_2} )
	
	dynamic_news_helper.send_tip(msg,Se, nil, nil,"common","beep_2","gr")
	
	return true
end

function DynamicNewsManager:SpamDead() -->> Talk about dead bodies (fake)
	--printf(">>> Tronex: SpamDead call")
	if (not self.sentences_fnames) or (not self.sentences_fnames) then
		return false
	end
	local clr_1 = "%" .. dynamic_news_helper.GetColor(10)
	local clr_2 = "%" .. dynamic_news_helper.GetColor(11)
	local a1 = self.sentences_fnames[math.random(#self.sentences_fnames)]
	local b1 = self.sentences_snames[math.random(#self.sentences_snames)]
	local a2 = self.sentences_fnames[math.random(#self.sentences_fnames)]
	local b2 = self.sentences_snames[math.random(#self.sentences_snames)]
	local c
	while true do
		c = dynamic_news_helper.GetMap(math.random(15,30),1)	-- don't change the map orders
		if c ~= level.name() then break end
	end
	c = game.translate_string(c)
	local tbl = self:ReadTextList("st_dyn_news_death_reason_")
	if (not tbl) then
		return false
	end
	local y1 = string.char(math.random(65,90))
	local y2 = string.char(math.random(65,90))
	local z1 = tostring(math.random(9))
	local z2 = tostring(math.random(9))
	local z3 = tostring(math.random(9))
	
	local Se = strformat("%s %s",a1,b1)
	local msg = self:ReadTextKeyList( "$clr_1$death_report -$clr_2 $fname $sname, $map, $death_reason, $y1$y2-$z1$z2$z3" , {["clr_1"]=clr_1 , ["clr_2"]=clr_2 , ["death_report"]=game.translate_string("st_dyn_news_spc_death_report") , ["fname"]=a2 , ["sname"]=b2 , ["map"]=c , ["death_reason"]=tbl[math.random(#tbl)] , ["y1"]=y1 , ["y2"]=y2 , ["z1"]=z1 , ["z2"]=z2 , ["z3"]=z3})
	
	dynamic_news_helper.send_tip(msg,Se, nil, nil,"common","no_sound","gr")
	
	return true
end

function DynamicNewsManager:ResponseOnFoundArtefact(who) -->> React to people who found artifacts recently
	--printf(">>> Tronex: ResponseOnFoundArtefact call")
	local sender = self:FindSpeakerNoVictim(who,true,true) 
	if (not sender) then
		return false
	end
	
	local tbl = self:ReadTextList("st_dyn_news_res_artifact_")
	if (not tbl) then
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	self.response["message"] = {Mg=tbl[math.random(#tbl)],Ic=sender:character_icon(),Snd="beep_1",Se=Se,It="npc",To=false,St=false}
	
	return true
end

function DynamicNewsManager:ResponseOnBoughtItems(who) -->> React to people who bought items recently
	--printf(">>> Tronex: ResponseOnBoughtItems call")
	local sender = self:FindSpeakerNoVictim(who,true,true)
	if (not sender) then
		return false
	end
	
	local tbl = self:ReadTextList("st_dyn_news_res_trade_")
	if (not tbl) then
		return false
	end

	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	self.response["message"] = {Mg=tbl[math.random(#tbl)],Ic=sender:character_icon(),Snd="beep_1",Se=Se,It="npc",To=false,St=false}
	
	return true
end

function DynamicNewsManager:ResponseOnDeathByStalker(who) -->> React to stalker's death by another stalker
	--printf(">>> Tronex: ResponseOnDeathByStalker call")
	local sender = self:FindSpeakerNoVictim(who,true,true)
	if (not sender) then
		return false
	end

	local tbl = self:ReadTextList("st_dyn_news_res_death_stalker_")
	if (not tbl) then
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	self.response["message"] = {Mg=tbl[math.random(#tbl)],Ic=sender:character_icon(),Snd="beep_1",Se=Se,It="npc",To=false,St=false}

	return true
end

function DynamicNewsManager:ResponseOnDeathByMutant(who) -->> React to stalker's death by mutants
	--printf(">>> Tronex: ResponseOnDeathByMutant call")
	local sender = self:FindSpeakerNoVictim(who,true,true)
	if (not sender) then
		return false
	end

	local tbl = self:ReadTextList("st_dyn_news_res_death_")
	if (not tbl) then
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	self.response["message"] = {Mg=tbl[math.random(#tbl)],Ic=sender:character_icon(),Snd="beep_1",Se=Se,It="npc",To=false,St=false}

	return true
end

function DynamicNewsManager:ResponseOnDeathBySurges(who) -->> React to stalker's death by surges [NOT USED]
	--printf(">>> Tronex: ResponseOnDeathBySurges call")
	local sender = self:FindSpeakerNoVictim(who,true,true)
	if (not sender) then
		return false
	end
	
	local tbl = self:ReadTextList("st_dyn_news_res_death_surge_")
	if (not tbl) then
		return false
	end

	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	self.response["message"] = {Mg=tbl[math.random(#tbl)],Ic=sender:character_icon(),Snd="beep_1",Se=Se,It="npc",To=false,St=false}

	return true
end

function DynamicNewsManager:ResponseOnDeathByStalker_Fake()	-->> React to stalker's death by another stalker (fake)
	--printf(">>> Tronex: ResponseOnDeathByStalker_Fake call")
	if (not self.sentences_fnames) or (not self.sentences_fnames) then
		return false
	end
	
	local tbl = self:ReadTextList("st_dyn_news_res_fake_death_stalker_")
	if (not tbl) then
		return false
	end
	
	local Se = strformat("%s %s" , self.sentences_fnames[math.random(#self.sentences_fnames)] , self.sentences_snames[math.random(#self.sentences_snames)])
	
	self.response["message"] = {Mg=tbl[math.random(#tbl)],Ic="common",Snd="no_sound",Se=Se,It="gr",To=false,St=false}

	return true
end

function DynamicNewsManager:ResponseOnDeathByMutant_Fake() -->> React to stalker's death by mutants (fake)
	--printf(">>> Tronex: ResponseOnDeathByMutant_Fake call")
	if (not self.sentences_fnames) or (not self.sentences_fnames) then
		return false
	end

	local tbl = self:ReadTextList("st_dyn_news_res_fake_death_mutant_")
	if (not tbl) then
		return false
	end
	
	local Se = strformat("%s %s" , self.sentences_fnames[math.random(#self.sentences_fnames)] , self.sentences_snames[math.random(#self.sentences_snames)])
	
	self.response["message"] = {Mg=tbl[math.random(#tbl)],Ic="common",Snd="no_sound",Se=Se,It="gr",To=false,St=false}

	return true
end

function DynamicNewsManager:ResponseOnDeathBySurges_Fake() -->> React to stalker's death by surges (fake)
	--printf(">>> Tronex: ResponseOnDeathBySurges_Fake call")
	if (not self.sentences_fnames) or (not self.sentences_fnames) then
		return false
	end
	
	local tbl = self:ReadTextList("st_dyn_news_res_fake_death_surge_")
	if (not tbl) then 
		return false 
	end
	
	local Se = strformat("%s %s" , self.sentences_fnames[math.random(#self.sentences_fnames)] , self.sentences_snames[math.random(#self.sentences_snames)])
	
	self.response["message"] = {Mg=tbl[math.random(#tbl)],Ic="common",Snd="no_sound",Se=Se,It="gr",To=30,St=false}

	return true
end

function DynamicNewsManager:GossipTime() -->> Talk about time of day
	--printf(">>> Tronex: GossipTime call")
	if not show_about_environment then
		return false
	end
	
	local sender = self:FindSpeakerRandom()
	if (not sender) then
		return false
	end
	
	local TimeStringPharse = dynamic_news_helper.GetTimePharseAsString()
	
	local tbl = self:ReadTextList("st_dyn_news_time_" .. TimeStringPharse .. "_")
	if (not tbl) then
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	self:PushToChannel(sender:character_community(),{Mg=tbl[math.random(#tbl)],Ic=sender:character_icon(),Snd="beep_1",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:GossipWeather() -->> Talk about the weather
	--printf(">>> Tronex: GossipWeather call")
	if not show_about_environment then
		return false
	end
	
	local hrs = level.get_time_hours()
	if hrs >= 21 or hrs < 4 then -->> no weather news in night
		return false
	end
	
	local sender = self:FindSpeakerRandom()
	if (not sender) then
		return false
	end
	
	--type of weather: {"clear","partly","cloudy","foggy","rain","storm"}
	local WeatherNews
	local WeatherType = level_weathers.get_weather_manager().curr_weather
	
	if not (WeatherType) then
		return false
	end
	
	if (WeatherType == "rain") or (WeatherType == "storm") then -- rain check
		local RainFactor = level.rain_factor()
		if (RainFactor >= 0.5) then
			WeatherNews = "storm"
		elseif (RainFactor > 0) and (RainFactor < 0.5) then
			WeatherNews = "rain"
		else -- if it's a rainy weather but there's no actual rain, go back.
			return false
		end
	elseif (WeatherType == "foggy") then -- fog check
		local LastHour = level_weathers.get_weather_manager().last_hour
		local LastHourString = level_weathers.get_weather_manager():get_hour_as_string(LastHour)
		local FarDistance = level_weathers.get_weather_manager().far_distances[WeatherType][LastHourString]
		if FarDistance and (FarDistance < 200) then
			WeatherNews = "foggy"
		else -- if it's a foggy weather but there's no actual fog, go back.
			return false
		end
	elseif (level.rain_factor() <= 0) then
		WeatherNews = WeatherType
	else
		return false
	end
		
	local tbl = self:ReadTextList("st_dyn_news_weather_" .. WeatherNews .. "_")
	if (not tbl) then
		return false
	end
	
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	self:PushToChannel(sender:character_community(),{Mg=tbl[math.random(#tbl)],Ic=sender:character_icon(),Snd="beep_1",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:GossipLoot(sender,best_item,all_value) -->> Talk about the loot
	--printf(">>> Tronex: GossipLoot call")
	if not (sender and best_item and all_value) then
		return false
	end
	
	-- limit the spam
	self.spammer.show_about_loot = self.spammer.show_about_loot + 1
	if (self.spammer.show_about_loot > 1) then
		self.spammer.show_about_loot = 0
	end
	if (self.spammer.show_about_loot == 0) then
		return false
	end
	
	local tbl,msg
	if (math.random(2) == 1) then
		--printf(">>> Tronex: GossipLoot - loot good or bad")
		if all_value >= 1000 then
			tbl = self:ReadTextList("st_dyn_news_loot_good_")
		else
			tbl = self:ReadTextList("st_dyn_news_loot_bad_")
		end
		if (not tbl) then 
			return false 
		end
		msg = tbl[math.random(#tbl)]
		
	elseif best_item then
		--printf(">>> Tronex: GossipLoot - loot by item")
		local item_name = game.translate_string(system_ini():r_string_ex(best_item:section(),"inv_name") or "")
		local tbl = self:ReadTextList("st_dyn_news_loot_item_")
		if (not tbl) then
			return false
		end
		msg	= self:ReadTextKeyList( tbl[math.random(#tbl)] , { ["what"] = item_name } )
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	self.response["message"] = {Mg=msg,Ic=sender:character_icon(),Snd="beep_1",Se=Se,It="npc",To=false,St=false}
	
	return true
end

function DynamicNewsManager:GossipEmissionEnd(what) -->> stalkers reacting about the surge
	--printf(">>> Tronex: GossipEmissionEnd call")
	if (not show_about_environment) or ((what ~= "emission") and (what ~= "storm")) then
		return false
	end
	
	local sender = self:FindSpeakerRandom()
	if (not sender) then
		return false
	end
		
	local tbl = self:ReadTextList("st_dyn_news_surge_after_")
	if (not tbl) then
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = self:ReadTextKeyList( tbl[math.random(#tbl)] , { ["what"]=what } )
	
	dynamic_news_helper.send_tip(msg,Se,math.random(10,15),nil,sender:character_icon(),"beep_1","npc") -- no need for push to channel
	self.surge_type	= "" -- reset
	
	return true
end

function DynamicNewsManager:CompanionAboutLife(sender) -->> Companion chitchat
	--printf(">>> Tronex: CompanionAboutLife call")
	if (not sender) then
		return false
	end
	
	local alife = alife()
	local se_actor = alife:actor()
	local tbl
	if (math.random(2) == 1) and (sender:community() ~= "monolith") then
		tbl = self:ReadTextList("st_dyn_news_companion_life_all_")
	else
		tbl = self:ReadTextList("st_dyn_news_companion_life_" .. sender:community() .. "_")
	end
	if (not tbl) then 
		return false 
	end
	
	local msg = tbl[math.random(#tbl)]
	if string.match(msg,"$name") then
		msg = self:ReadTextKeyList( msg , { ["name"]=se_actor:character_name() } )
	end
	
	local Se = strformat("%s, %s",sender:character_name(),game.translate_string("st_dyn_news_sender_companion"))
	
	--printf(">>> Tronex: CompanionAboutLife - push") -->> remove me later
	self:PushToChannel("general",{Mg=msg,Ic=sender:character_icon(),Snd="beep_2",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:CompanionAboutLevel(sender) -->> Companion talk about the current map
	--printf(">>> Tronex: CompanionAboutLevel call")
	if (not sender) then
		return false
	end
	
	local lvl = level.name()
	local tbl
	if (dynamic_news_helper.GetHomeMap(lvl) == sender:community()) then -->> error
		tbl = self:ReadTextList("st_dyn_news_companion_level_home_")
	elseif (sender:community() ~= "monolith") then
		tbl = self:ReadTextList("st_dyn_news_companion_level_" .. lvl .. "_")
	end
	if (not tbl) then 
		return false 
	end
	
	local Se = strformat("%s, %s",sender:character_name(),game.translate_string("st_dyn_news_sender_companion"))
	
	self:PushToChannel("general",{Mg=tbl[math.random(#tbl)],Ic=sender:character_icon(),Snd="beep_1",Se=Se,It="npc"})
	
	-- run level news once per map
	--self.level_shift = false
	
	return true
end

function DynamicNewsManager:CompanionAboutActor(sender) -->> Companion talk about player's rank and reputation
	--printf(">>> Tronex: CompanionAboutActor call")
	if (not sender) then
		return false
	end
	
	local alife = alife()
	local se_actor = alife:actor()
	local a,b
	local rep_tbl = {"terrible","really_bad","very_bad","bad","neutral","good","very_good","really_good","excellent"}
	local rank_tbl = {"novice","trainee","experienced","professional","veteran","expert","master","legend"}
	local actor_rep = alun_utils.get_reputation_name(db.actor:character_reputation())
	local actor_rank = ranks.get_obj_rank_name(db.actor)
	for i=1,#rep_tbl do
		if string.match(actor_rep,rep_tbl[i]) then
			if (i <= 4) then a = 1
			elseif (i > 4) and (i < 7) then a = 2
			elseif (i >= 7) then a = 3
			end
			break
		end
	end
	for i=1,#rank_tbl do
		if string.match(actor_rank,rank_tbl[i]) then
			if (i < 3) then b = 1
			elseif (i >= 3) and (i < 5) then b = 2
			elseif (i >= 5) and (i < 7) then b = 3
			elseif (i == 7) then b = 4
			end
			break
		end
	end
	
	local tbl
	if (math.random(2) == 1) then
		tbl = self:ReadTextList("st_dyn_news_companion_rep_" .. tostring(a) .. "_")
	else
		tbl = self:ReadTextList("st_dyn_news_companion_rank_" .. tostring(b) .. "_")
	end
	if (not tbl) then 
		return false 
	end
	
	local Se = strformat("%s, %s",sender:character_name(),game.translate_string("st_dyn_news_sender_companion"))
	local msg = self:ReadTextKeyList( tbl[math.random(#tbl)] , { ["name"]=se_actor:character_name() } )
	
	--printf(">>> Tronex: Rank: " .. actor_rank .. ", Reputaion: " .. actor_rep)
	self:PushToChannel("general",{Mg=msg,Ic=sender:character_icon(),Snd="beep_1",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:WelcomeToNetwork() -->> Welcome message on new game
	--printf(">>> Tronex: WelcomeToNetwork call")
	local clr_1 = "%" .. dynamic_news_helper.GetColor(10)
	local clr_2 = "%" .. dynamic_news_helper.GetColor(11)
	
	-- Count the number of stalkers across the zone, except monolith and zombies
	local c = 1
	local sim = alife()
	for i=1,65534 do 
		local se_obj = sim:object(i)
		if (se_obj and IsStalker(nil,se_obj:clsid()) and se_obj:alive() and se_obj:community() ~= "zombied" and se_obj:community() ~= "monolith" and se_obj.group_id ~= 65535) then 
			c = c + 1
		end
	end
	
	local se_actor = sim:actor()
	
	local Se = game.translate_string("st_dyn_news_sender_com_centre")
	local msg = self:ReadTextKeyList( game.translate_string("st_dyn_news_welcome_stalker") , {["clr_1"]=clr_1 , ["clr_2"]=clr_2 , ["name"]=se_actor:character_name() , ["number"]=tostring(c)} )
	
	dynamic_news_helper.send_tip(msg,Se, 20, 20,"communication","welcome","gr")
	
end


--=================================================< Helpers >=================================================
function DynamicNewsManager:BuildSentenceStalkerEnemy(victim,who,mn,mx)
	local comm_victim = victim:character_community()
	local comm_who = who:character_community()
	local comm, dist
	local c = 0
	for i=1, #db.OnlineStalkers do
		if (db.OnlineStalkers[i] ~= who_id) then
			local st = db.storage[db.OnlineStalkers[i]]
			local npc = st and st.object or level.object_by_id(db.OnlineStalkers[i])
			if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i])) then
				comm = npc:character_community()	-->> remove local
				if (comm == comm_who) then
					dist = victim:position():distance_to(npc:position())
					if (dist < mx) or (dist > mn) then 
						c = c + 1
					end
				end
			end 
		end
		if (c >= 2) then 
			break 
		end
	end

	local sentences = {}
	local string_count = 1
	while true do 
		local tr_s = game.translate_string("st_dyn_news_builder_attacked_"..string_count)
		if (tr_s == "st_dyn_news_builder_attacked_"..string_count) then 
			break
		else 
			table.insert(sentences,tr_s)
		end
		string_count = string_count + 1
	end
	
	if (#sentences == 0) then 	
		return false
	end

	if (c >= 2) then 
		return sentences[math.random(#sentences)], dynamic_news_helper.GetCommunityDescription(who,math.random(9,10))
	end

	return sentences[math.random(#sentences)], dynamic_news_helper.GetCommunityDescription(who,math.random(7,8))
end

function DynamicNewsManager:ReadTextList(st) -->> read strings with specific pattern (ends with increased number) -> return them translated in a table
	--printf(">>> Tronex: ReadTextList call help")
	local string_count = 1
	local tr_t = {}
	while true do 
		local tr_s = game.translate_string(st .. string_count)
		if (tr_s == st .. string_count) then 
			break 
		else 
			table.insert(tr_t,tr_s)
		end
		string_count = string_count + 1
	end
	
	if #tr_t == 0 then
		return false
	end
	
	return tr_t
end

function DynamicNewsManager:ReadTextKeyList(str_in,tbl) -->> read translated strings -> replace included special keys/patterns with the ones from (tbl) -> return the modified strings. 
	--printf(">>> Tronex: ReadTextKeyList call help")
	local m_s = ""
	local str = str_in
	for k,v in pairs(tbl) do
		m_s = string.gsub(str,"%$"..k,v)
		str = m_s
	end
	
	return str
end

function DynamicNewsManager:CheckItemString(st) -->> remove me later
	--printf(">>> Tronex: CheckItemString call help")
	local str
	str = game.translate_string(st) -- 1st try
	if (str == st) then
		str = game.translate_string("st_" .. st) -- 2nd try
	end
	if (str == "st_" .. st) then -- 3rd try
		str = game.translate_string(string.gsub(st,"_","-"))
	end
	if (str == string.gsub(st,"_","-")) then
		return false -- ultimate fail
	end
	
	return str
end

function DynamicNewsManager:PickCompanion() -->> pick a random companion
	--printf(">>> Tronex: PickCompanion call help")
	local npcs = dynamic_news_helper.list_actor_squad_by_id()
	if #npcs == 0 then
		return nil
	end
	
	local picked = npcs[math.random(#npcs)]
	
	return alife():object(picked) -- return a-life object
end

function DynamicNewsManager:PickNewCompanion() -->> pick a random "new" companion
	--printf(">>> Tronex: PickNewCompanion call help")
	local new_npcs = {}
	local tbl_1 = dynamic_news_helper.list_actor_squad_by_id()
	local tbl_2 = self.companions_list
	local count = 1
	local is_same = false
	
	if (#tbl_1 == 0) then
		return false
	end
	
	-- If there's new companions, put them in (new_npcs) table
	for i=1,#tbl_1 do
		if #tbl_2 > 0 then
			for j=1,#tbl_2 do
				if tbl_1[i] == tbl_2[j] then
					is_same = true
					break
				end
			end
		end
		if (not is_same) and tbl_1[i] then
			new_npcs[count] = tbl_1[i]
			count = count + 1
			--printf(">>> Tronex: found new companion!")
		end
		is_same = false
	end
	
	if (#new_npcs == 0) then
		return false
	end
	
	self.companions_list = dynamic_news_helper.list_actor_squad_by_id() -- If there's new companions, update the companions list
	
	local picked = new_npcs[math.random(#new_npcs)]
	
	return alife():object(picked) -- return a-life object
end

function DynamicNewsManager:GetLootValue(item_tbl) -->> get value of whole loot
	--printf(">>> Tronex: GetLootValue call help")
	local value = 0
	for i=1,#item_tbl do
		value = value + item_tbl[i]:cost()
	end
	return value
end

function DynamicNewsManager:GetLootBestItem(item_tbl) -->> get value of best looted item
	--printf(">>> Tronex: GetLootBestItem call help")
	local value = 0
	local best_item
	for i=1,#item_tbl do
		if item_tbl[i]:cost() > value then
			value = item_tbl[i]:cost()
			best_item = item_tbl[i]
		end
	end

	return best_item
end

function DynamicNewsManager:NewsToggle() -->> turn off news if there is an emission, or player is underground
	--printf(">>> Tronex: NewsToggle call help")
	--printf(">>> Tronex: NewsToggle call help - self.surge_shift = " .. tostring(self.surge_shift))
	--printf(">>> Tronex: NewsToggle call help - self.news_toggle = " .. tostring(self.news_toggle))
	
	-- necessary, otherwise the game will crash due to playing news sound before completely loading.
	if device():is_paused() then	
		return true
	end
		
	-- disable news if player inside underground map.
	for i=1,9 do
		if level.name() == dynamic_news_helper.GetMap(i,1) then
			return true
		end
	end
	
	local news_state = true
	
	-- if a surge has started, or is underground ---> news go off, erase the stored messages, set surge_type
	if xr_conditions.surge_started() then
		news_state = false
		
		if surge_manager and surge_manager.is_started() then 
			self.surge_type = "emission"
		elseif psi_storm_manager and psi_storm_manager.is_started() then 
			self.surge_type = "storm"
		end
		
		for ch,messages in pairs(self.queue) do
			local c = #messages
			while c > 0 do
				local message = messages[c]
				if (message) then
					messages[c] = nil
				end
				c = c - 1
			end
		end
	end
	
	-- if surge started (even on load) ---> set up surge_type, otherwise if surge finished (even on load) ---> send 'surge end' news
	if self.surge_shift and xr_conditions.surge_started() then
		self.surge_shift = false
	elseif (not self.surge_shift) and xr_conditions.surge_complete() then
		self.surge_shift = true
		self:GossipEmissionEnd(self.surge_type)
		self:ReportDeathBySurge()
	end
	
	-- run once at each surge
	if news_state == (not self.news_toggle) then
		self.news_toggle = news_state
		local Msg
		local num = math.random(5,10)
		local Se = game.translate_string("st_dyn_news_sender_com_centre")
		if news_state then 
			Msg = game.translate_string("st_dyn_news_spc_commu_on")
			dynamic_news_helper.send_tip(Msg,Se,num,10,"communication","welcome","gr")
		else
			Msg = game.translate_string("st_dyn_news_spc_commu_off")
			dynamic_news_helper.send_tip(Msg,Se,num,10,"communication","communication_lost","gr")
		end
	end
	
	return (not news_state)	
	
end